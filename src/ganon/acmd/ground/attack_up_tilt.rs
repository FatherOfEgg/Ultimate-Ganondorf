//! *NOTE*: This file is solely the work of the Ultimate S team, headed by `@chrispo`.
//!
//! The only credit I can claim is converting the library to use Smashline 2.
use smash::app::lua_bind::*;
use smash::app::sv_animcmd::*;
use smash::lib::lua_const::*;
use smash::lua2cpp::*;
use smash::phx::Hash40;
use smash_script::*;
use smashline::*;

unsafe extern "C" fn ganon_utilt(fighter: &mut L2CAgentBase) {
    frame(fighter.lua_state_agent, 12.0);
    if macros::is_excute(fighter) {
        macros::ATTACK(
            fighter,
            /*ID*/ 0,
            /*Part*/ 0,
            /*Bone*/ Hash40::new("kneer"),
            /*Damage*/ 3.0,
            /*Angle*/ 285,
            /*KBG*/ 100,
            /*FKB*/ 80,
            /*BKB*/ 0,
            /*Size*/ 5.0,
            /*X*/ 7.0,
            /*Y*/ -1.0,
            /*Z*/ 0.5,
            /*X2*/ None,
            /*Y2*/ None,
            /*Z2*/ None,
            /*Hitlag*/ 1.0,
            /*SDI*/ 1.0,
            /*Clang_Rebound*/ *ATTACK_SETOFF_KIND_ON,
            /*FacingRestrict*/ *ATTACK_LR_CHECK_F,
            /*SetWeight*/ true,
            /*ShieldDamage*/ 0,
            /*Trip*/ -1.0,
            /*Rehit*/ 0,
            /*Reflectable*/ false,
            /*Absorbable*/ false,
            /*Flinchless*/ false,
            /*DisableHitlag*/ false,
            /*Direct_Hitbox*/ true,
            /*Ground_or_Air*/ *COLLISION_SITUATION_MASK_A,
            /*Hitbits*/ *COLLISION_CATEGORY_MASK_ALL,
            /*CollisionPart*/ *COLLISION_PART_MASK_ALL,
            /*FriendlyFire*/ false,
            /*Effect*/ Hash40::new("collision_attr_normal"),
            /*SFXLevel*/ *ATTACK_SOUND_LEVEL_L,
            /*SFXType*/ *COLLISION_SOUND_ATTR_KICK,
            /*Type*/ *ATTACK_REGION_KICK,
        );
        macros::ATTACK(
            fighter,
            /*ID*/ 2,
            /*Part*/ 0,
            /*Bone*/ Hash40::new("legr"),
            /*Damage*/ 3.0,
            /*Angle*/ 285,
            /*KBG*/ 100,
            /*FKB*/ 80,
            /*BKB*/ 0,
            /*Size*/ 4.0,
            /*X*/ 5.0,
            /*Y*/ 0.0,
            /*Z*/ 0.5,
            /*X2*/ None,
            /*Y2*/ None,
            /*Z2*/ None,
            /*Hitlag*/ 1.0,
            /*SDI*/ 1.0,
            /*Clang_Rebound*/ *ATTACK_SETOFF_KIND_ON,
            /*FacingRestrict*/ *ATTACK_LR_CHECK_F,
            /*SetWeight*/ true,
            /*ShieldDamage*/ 0,
            /*Trip*/ -1.0,
            /*Rehit*/ 0,
            /*Reflectable*/ false,
            /*Absorbable*/ false,
            /*Flinchless*/ false,
            /*DisableHitlag*/ false,
            /*Direct_Hitbox*/ true,
            /*Ground_or_Air*/ *COLLISION_SITUATION_MASK_A,
            /*Hitbits*/ *COLLISION_CATEGORY_MASK_ALL,
            /*CollisionPart*/ *COLLISION_PART_MASK_ALL,
            /*FriendlyFire*/ false,
            /*Effect*/ Hash40::new("collision_attr_normal"),
            /*SFXLevel*/ *ATTACK_SOUND_LEVEL_L,
            /*SFXType*/ *COLLISION_SOUND_ATTR_KICK,
            /*Type*/ *ATTACK_REGION_KICK,
        );
        macros::ATTACK(
            fighter,
            /*ID*/ 3,
            /*Part*/ 0,
            /*Bone*/ Hash40::new("legr"),
            /*Damage*/ 3.0,
            /*Angle*/ 285,
            /*KBG*/ 100,
            /*FKB*/ 80,
            /*BKB*/ 0,
            /*Size*/ 3.0,
            /*X*/ 0.0,
            /*Y*/ 0.0,
            /*Z*/ 0.0,
            /*X2*/ None,
            /*Y2*/ None,
            /*Z2*/ None,
            /*Hitlag*/ 1.0,
            /*SDI*/ 1.0,
            /*Clang_Rebound*/ *ATTACK_SETOFF_KIND_ON,
            /*FacingRestrict*/ *ATTACK_LR_CHECK_F,
            /*SetWeight*/ true,
            /*ShieldDamage*/ 0,
            /*Trip*/ -1.0,
            /*Rehit*/ 0,
            /*Reflectable*/ false,
            /*Absorbable*/ false,
            /*Flinchless*/ false,
            /*DisableHitlag*/ false,
            /*Direct_Hitbox*/ true,
            /*Ground_or_Air*/ *COLLISION_SITUATION_MASK_A,
            /*Hitbits*/ *COLLISION_CATEGORY_MASK_ALL,
            /*CollisionPart*/ *COLLISION_PART_MASK_ALL,
            /*FriendlyFire*/ false,
            /*Effect*/ Hash40::new("collision_attr_normal"),
            /*SFXLevel*/ *ATTACK_SOUND_LEVEL_L,
            /*SFXType*/ *COLLISION_SOUND_ATTR_KICK,
            /*Type*/ *ATTACK_REGION_KICK,
        );
        macros::ATTACK(
            fighter,
            /*ID*/ 4,
            /*Part*/ 0,
            /*Bone*/ Hash40::new("kneer"),
            /*Damage*/ 3.0,
            /*Angle*/ 285,
            /*KBG*/ 100,
            /*FKB*/ 60,
            /*BKB*/ 0,
            /*Size*/ 5.0,
            /*X*/ 7.0,
            /*Y*/ -1.0,
            /*Z*/ 0.5,
            /*X2*/ None,
            /*Y2*/ None,
            /*Z2*/ None,
            /*Hitlag*/ 1.0,
            /*SDI*/ 1.0,
            /*Clang_Rebound*/ *ATTACK_SETOFF_KIND_ON,
            /*FacingRestrict*/ *ATTACK_LR_CHECK_F,
            /*SetWeight*/ true,
            /*ShieldDamage*/ 0,
            /*Trip*/ -1.0,
            /*Rehit*/ 0,
            /*Reflectable*/ false,
            /*Absorbable*/ false,
            /*Flinchless*/ false,
            /*DisableHitlag*/ false,
            /*Direct_Hitbox*/ true,
            /*Ground_or_Air*/ *COLLISION_SITUATION_MASK_G,
            /*Hitbits*/ *COLLISION_CATEGORY_MASK_ALL,
            /*CollisionPart*/ *COLLISION_PART_MASK_ALL,
            /*FriendlyFire*/ false,
            /*Effect*/ Hash40::new("collision_attr_normal"),
            /*SFXLevel*/ *ATTACK_SOUND_LEVEL_L,
            /*SFXType*/ *COLLISION_SOUND_ATTR_KICK,
            /*Type*/ *ATTACK_REGION_KICK,
        );
        macros::ATTACK(
            fighter,
            /*ID*/ 5,
            /*Part*/ 0,
            /*Bone*/ Hash40::new("legr"),
            /*Damage*/ 3.0,
            /*Angle*/ 285,
            /*KBG*/ 100,
            /*FKB*/ 60,
            /*BKB*/ 0,
            /*Size*/ 4.0,
            /*X*/ 5.0,
            /*Y*/ 0.0,
            /*Z*/ 0.5,
            /*X2*/ None,
            /*Y2*/ None,
            /*Z2*/ None,
            /*Hitlag*/ 1.0,
            /*SDI*/ 1.0,
            /*Clang_Rebound*/ *ATTACK_SETOFF_KIND_ON,
            /*FacingRestrict*/ *ATTACK_LR_CHECK_F,
            /*SetWeight*/ true,
            /*ShieldDamage*/ 0,
            /*Trip*/ -1.0,
            /*Rehit*/ 0,
            /*Reflectable*/ false,
            /*Absorbable*/ false,
            /*Flinchless*/ false,
            /*DisableHitlag*/ false,
            /*Direct_Hitbox*/ true,
            /*Ground_or_Air*/ *COLLISION_SITUATION_MASK_G,
            /*Hitbits*/ *COLLISION_CATEGORY_MASK_ALL,
            /*CollisionPart*/ *COLLISION_PART_MASK_ALL,
            /*FriendlyFire*/ false,
            /*Effect*/ Hash40::new("collision_attr_normal"),
            /*SFXLevel*/ *ATTACK_SOUND_LEVEL_L,
            /*SFXType*/ *COLLISION_SOUND_ATTR_KICK,
            /*Type*/ *ATTACK_REGION_KICK,
        );
        macros::ATTACK(
            fighter,
            /*ID*/ 6,
            /*Part*/ 0,
            /*Bone*/ Hash40::new("legr"),
            /*Damage*/ 3.0,
            /*Angle*/ 285,
            /*KBG*/ 100,
            /*FKB*/ 60,
            /*BKB*/ 0,
            /*Size*/ 3.0,
            /*X*/ 0.0,
            /*Y*/ 0.0,
            /*Z*/ 0.0,
            /*X2*/ None,
            /*Y2*/ None,
            /*Z2*/ None,
            /*Hitlag*/ 1.0,
            /*SDI*/ 1.0,
            /*Clang_Rebound*/ *ATTACK_SETOFF_KIND_ON,
            /*FacingRestrict*/ *ATTACK_LR_CHECK_F,
            /*SetWeight*/ true,
            /*ShieldDamage*/ 0,
            /*Trip*/ -1.0,
            /*Rehit*/ 0,
            /*Reflectable*/ false,
            /*Absorbable*/ false,
            /*Flinchless*/ false,
            /*DisableHitlag*/ false,
            /*Direct_Hitbox*/ true,
            /*Ground_or_Air*/ *COLLISION_SITUATION_MASK_G,
            /*Hitbits*/ *COLLISION_CATEGORY_MASK_ALL,
            /*CollisionPart*/ *COLLISION_PART_MASK_ALL,
            /*FriendlyFire*/ false,
            /*Effect*/ Hash40::new("collision_attr_normal"),
            /*SFXLevel*/ *ATTACK_SOUND_LEVEL_L,
            /*SFXType*/ *COLLISION_SOUND_ATTR_KICK,
            /*Type*/ *ATTACK_REGION_KICK,
        );
    }
    frame(fighter.lua_state_agent, 15.0);
    if macros::is_excute(fighter) {
        AttackModule::clear_all(fighter.module_accessor);
        macros::ATTACK(
            fighter,
            /*ID*/ 0,
            /*Part*/ 0,
            /*Bone*/ Hash40::new("legr"),
            /*Damage*/ 13.0,
            /*Angle*/ 270,
            /*KBG*/ 80,
            /*FKB*/ 0,
            /*BKB*/ 60,
            /*Size*/ 5.0,
            /*X*/ 3.0,
            /*Y*/ 0.0,
            /*Z*/ 0.0,
            /*X2*/ None,
            /*Y2*/ None,
            /*Z2*/ None,
            /*Hitlag*/ 1.0,
            /*SDI*/ 1.0,
            /*Clang_Rebound*/ *ATTACK_SETOFF_KIND_ON,
            /*FacingRestrict*/ *ATTACK_LR_CHECK_F,
            /*SetWeight*/ false,
            /*ShieldDamage*/ 0,
            /*Trip*/ 0.0,
            /*Rehit*/ 0,
            /*Reflectable*/ false,
            /*Absorbable*/ false,
            /*Flinchless*/ false,
            /*DisableHitlag*/ false,
            /*Direct_Hitbox*/ true,
            /*Ground_or_Air*/ *COLLISION_SITUATION_MASK_G,
            /*Hitbits*/ *COLLISION_CATEGORY_MASK_ALL,
            /*CollisionPart*/ *COLLISION_PART_MASK_ALL,
            /*FriendlyFire*/ false,
            /*Effect*/ Hash40::new("collision_attr_fire"),
            /*SFXLevel*/ *ATTACK_SOUND_LEVEL_L,
            /*SFXType*/ *COLLISION_SOUND_ATTR_FIRE,
            /*Type*/ *ATTACK_REGION_KICK,
        );
        macros::ATTACK(
            fighter,
            /*ID*/ 1,
            /*Part*/ 0,
            /*Bone*/ Hash40::new("legr"),
            /*Damage*/ 13.0,
            /*Angle*/ 270,
            /*KBG*/ 80,
            /*FKB*/ 0,
            /*BKB*/ 60,
            /*Size*/ 5.0,
            /*X*/ 9.0,
            /*Y*/ 0.0,
            /*Z*/ 0.0,
            /*X2*/ None,
            /*Y2*/ None,
            /*Z2*/ None,
            /*Hitlag*/ 1.0,
            /*SDI*/ 1.0,
            /*Clang_Rebound*/ *ATTACK_SETOFF_KIND_ON,
            /*FacingRestrict*/ *ATTACK_LR_CHECK_F,
            /*SetWeight*/ false,
            /*ShieldDamage*/ 0,
            /*Trip*/ 0.0,
            /*Rehit*/ 0,
            /*Reflectable*/ false,
            /*Absorbable*/ false,
            /*Flinchless*/ false,
            /*DisableHitlag*/ false,
            /*Direct_Hitbox*/ true,
            /*Ground_or_Air*/ *COLLISION_SITUATION_MASK_G,
            /*Hitbits*/ *COLLISION_CATEGORY_MASK_ALL,
            /*CollisionPart*/ *COLLISION_PART_MASK_ALL,
            /*FriendlyFire*/ false,
            /*Effect*/ Hash40::new("collision_attr_fire"),
            /*SFXLevel*/ *ATTACK_SOUND_LEVEL_L,
            /*SFXType*/ *COLLISION_SOUND_ATTR_FIRE,
            /*Type*/ *ATTACK_REGION_KICK,
        );
        macros::ATTACK(
            fighter,
            /*ID*/ 2,
            /*Part*/ 0,
            /*Bone*/ Hash40::new("legr"),
            /*Damage*/ 13.0,
            /*Angle*/ 361,
            /*KBG*/ 80,
            /*FKB*/ 0,
            /*BKB*/ 60,
            /*Size*/ 5.0,
            /*X*/ 3.0,
            /*Y*/ 0.0,
            /*Z*/ 0.0,
            /*X2*/ None,
            /*Y2*/ None,
            /*Z2*/ None,
            /*Hitlag*/ 1.0,
            /*SDI*/ 1.0,
            /*Clang_Rebound*/ *ATTACK_SETOFF_KIND_ON,
            /*FacingRestrict*/ *ATTACK_LR_CHECK_F,
            /*SetWeight*/ false,
            /*ShieldDamage*/ 0,
            /*Trip*/ 0.0,
            /*Rehit*/ 0,
            /*Reflectable*/ false,
            /*Absorbable*/ false,
            /*Flinchless*/ false,
            /*DisableHitlag*/ false,
            /*Direct_Hitbox*/ true,
            /*Ground_or_Air*/ *COLLISION_SITUATION_MASK_A,
            /*Hitbits*/ *COLLISION_CATEGORY_MASK_ALL,
            /*CollisionPart*/ *COLLISION_PART_MASK_ALL,
            /*FriendlyFire*/ false,
            /*Effect*/ Hash40::new("collision_attr_fire"),
            /*SFXLevel*/ *ATTACK_SOUND_LEVEL_L,
            /*SFXType*/ *COLLISION_SOUND_ATTR_FIRE,
            /*Type*/ *ATTACK_REGION_KICK,
        );
        macros::ATTACK(
            fighter,
            /*ID*/ 3,
            /*Part*/ 0,
            /*Bone*/ Hash40::new("legr"),
            /*Damage*/ 13.0,
            /*Angle*/ 361,
            /*KBG*/ 80,
            /*FKB*/ 0,
            /*BKB*/ 60,
            /*Size*/ 5.0,
            /*X*/ 9.0,
            /*Y*/ 0.0,
            /*Z*/ 0.0,
            /*X2*/ None,
            /*Y2*/ None,
            /*Z2*/ None,
            /*Hitlag*/ 1.0,
            /*SDI*/ 1.0,
            /*Clang_Rebound*/ *ATTACK_SETOFF_KIND_ON,
            /*FacingRestrict*/ *ATTACK_LR_CHECK_F,
            /*SetWeight*/ false,
            /*ShieldDamage*/ 0,
            /*Trip*/ 0.0,
            /*Rehit*/ 0,
            /*Reflectable*/ false,
            /*Absorbable*/ false,
            /*Flinchless*/ false,
            /*DisableHitlag*/ false,
            /*Direct_Hitbox*/ true,
            /*Ground_or_Air*/ *COLLISION_SITUATION_MASK_A,
            /*Hitbits*/ *COLLISION_CATEGORY_MASK_ALL,
            /*CollisionPart*/ *COLLISION_PART_MASK_ALL,
            /*FriendlyFire*/ false,
            /*Effect*/ Hash40::new("collision_attr_fire"),
            /*SFXLevel*/ *ATTACK_SOUND_LEVEL_L,
            /*SFXType*/ *COLLISION_SOUND_ATTR_FIRE,
            /*Type*/ *ATTACK_REGION_KICK,
        );
        macros::ATTACK(
            fighter,
            /*ID*/ 4,
            /*Part*/ 0,
            /*Bone*/ Hash40::new("top"),
            /*Damage*/ 13.0,
            /*Angle*/ 90,
            /*KBG*/ 80,
            /*FKB*/ 0,
            /*BKB*/ 60,
            /*Size*/ 6.0,
            /*X*/ 0.0,
            /*Y*/ 4.0,
            /*Z*/ 16.0,
            /*X2*/ None,
            /*Y2*/ None,
            /*Z2*/ None,
            /*Hitlag*/ 1.0,
            /*SDI*/ 1.0,
            /*Clang_Rebound*/ *ATTACK_SETOFF_KIND_ON,
            /*FacingRestrict*/ *ATTACK_LR_CHECK_F,
            /*SetWeight*/ false,
            /*ShieldDamage*/ 0,
            /*Trip*/ 0.0,
            /*Rehit*/ 0,
            /*Reflectable*/ false,
            /*Absorbable*/ false,
            /*Flinchless*/ false,
            /*DisableHitlag*/ false,
            /*Direct_Hitbox*/ true,
            /*Ground_or_Air*/ *COLLISION_SITUATION_MASK_GA,
            /*Hitbits*/ *COLLISION_CATEGORY_MASK_ALL,
            /*CollisionPart*/ *COLLISION_PART_MASK_ALL,
            /*FriendlyFire*/ false,
            /*Effect*/ Hash40::new("collision_attr_fire"),
            /*SFXLevel*/ *ATTACK_SOUND_LEVEL_L,
            /*SFXType*/ *COLLISION_SOUND_ATTR_FIRE,
            /*Type*/ *ATTACK_REGION_KICK,
        );
        macros::ATTACK(
            fighter,
            /*ID*/ 5,
            /*Part*/ 0,
            /*Bone*/ Hash40::new("top"),
            /*Damage*/ 13.0,
            /*Angle*/ 90,
            /*KBG*/ 80,
            /*FKB*/ 0,
            /*BKB*/ 60,
            /*Size*/ 6.0,
            /*X*/ 0.0,
            /*Y*/ 7.0,
            /*Z*/ 16.0,
            /*X2*/ Some(0.0),
            /*Y2*/ Some(22.0),
            /*Z2*/ Some(16.0),
            /*Hitlag*/ 1.0,
            /*SDI*/ 1.0,
            /*Clang_Rebound*/ *ATTACK_SETOFF_KIND_OFF,
            /*FacingRestrict*/ *ATTACK_LR_CHECK_F,
            /*SetWeight*/ false,
            /*ShieldDamage*/ 0,
            /*Trip*/ 0.0,
            /*Rehit*/ 0,
            /*Reflectable*/ false,
            /*Absorbable*/ false,
            /*Flinchless*/ false,
            /*DisableHitlag*/ false,
            /*Direct_Hitbox*/ true,
            /*Ground_or_Air*/ *COLLISION_SITUATION_MASK_GA,
            /*Hitbits*/ *COLLISION_CATEGORY_MASK_ALL,
            /*CollisionPart*/ *COLLISION_PART_MASK_ALL,
            /*FriendlyFire*/ false,
            /*Effect*/ Hash40::new("collision_attr_fire"),
            /*SFXLevel*/ *ATTACK_SOUND_LEVEL_L,
            /*SFXType*/ *COLLISION_SOUND_ATTR_FIRE,
            /*Type*/ *ATTACK_REGION_KICK,
        );
        macros::ATK_SET_SHIELD_SETOFF_MUL(fighter, /*ID*/ 0, /*ShieldstunMul*/ 0.3);
        macros::ATK_SET_SHIELD_SETOFF_MUL(fighter, /*ID*/ 1, /*ShieldstunMul*/ 0.3);
        macros::ATK_SET_SHIELD_SETOFF_MUL(fighter, /*ID*/ 2, /*ShieldstunMul*/ 0.3);
        macros::ATK_SET_SHIELD_SETOFF_MUL(fighter, /*ID*/ 3, /*ShieldstunMul*/ 0.3);
        macros::ATK_SET_SHIELD_SETOFF_MUL(fighter, /*ID*/ 4, /*ShieldstunMul*/ 0.3);
        macros::ATK_SET_SHIELD_SETOFF_MUL(fighter, /*ID*/ 5, /*ShieldstunMul*/ 0.3);
    }
    frame(fighter.lua_state_agent, 16.0);
    macros::FT_MOTION_RATE(fighter, /*FSM*/ 1.35);
    frame(fighter.lua_state_agent, 18.0);
    if macros::is_excute(fighter) {
        AttackModule::clear_all(fighter.module_accessor);
    }
    frame(fighter.lua_state_agent, 37.0);
    macros::FT_MOTION_RATE(fighter, /*FSM*/ 0.75);
    if macros::is_excute(fighter) {
        CancelModule::enable_cancel(fighter.module_accessor);
    }
}

unsafe extern "C" fn ganon_utilt_eff(agent: &mut L2CAgentBase) {
    frame(agent.lua_state_agent, 8.0);
    for _ in 0..6 {
        if macros::is_excute(agent) {
            macros::EFFECT(
                agent,
                Hash40::new("sys_damage_purple"),
                Hash40::new("havel"),
                0,
                1,
                0,
                0,
                0,
                0,
                0.7,
                0,
                0,
                0,
                0,
                0,
                0,
                true,
            );
            macros::EFFECT(
                agent,
                Hash40::new("ganon_rekkikyaku"),
                Hash40::new("top"),
                0,
                4,
                20,
                0,
                0,
                -90,
                0.7,
                0,
                0,
                0,
                0,
                0,
                0,
                true,
            );
            macros::LAST_EFFECT_SET_RATE(agent, 1.2);
            macros::LAST_EFFECT_SET_SCALE_W(agent, 0.8, 1.6, 0.5);
            macros::EFFECT(
                agent,
                Hash40::new("ganon_entry"),
                Hash40::new("top"),
                4,
                0,
                14,
                0,
                0,
                0,
                0.3,
                0,
                0,
                0,
                0,
                0,
                0,
                true,
            );
            macros::LAST_EFFECT_SET_RATE(agent, 1.9);
            macros::EFFECT(
                agent,
                Hash40::new("ganon_entry"),
                Hash40::new("top"),
                -4,
                0,
                14,
                0,
                0,
                0,
                0.3,
                0,
                0,
                0,
                0,
                0,
                0,
                true,
            );
            macros::LAST_EFFECT_SET_RATE(agent, 1.9);
            macros::EFFECT(
                agent,
                Hash40::new("ganon_entry"),
                Hash40::new("top"),
                6,
                0,
                20,
                0,
                0,
                0,
                0.3,
                0,
                0,
                0,
                0,
                0,
                0,
                true,
            );
            macros::LAST_EFFECT_SET_RATE(agent, 1.9);
            macros::EFFECT(
                agent,
                Hash40::new("ganon_entry"),
                Hash40::new("top"),
                -6,
                0,
                20,
                0,
                0,
                0,
                0.3,
                0,
                0,
                0,
                0,
                0,
                0,
                true,
            );
            macros::LAST_EFFECT_SET_RATE(agent, 1.9);
            macros::EFFECT(
                agent,
                Hash40::new("ganon_entry"),
                Hash40::new("top"),
                4,
                0,
                26,
                0,
                0,
                0,
                0.3,
                0,
                0,
                0,
                0,
                0,
                0,
                true,
            );
            macros::LAST_EFFECT_SET_RATE(agent, 1.9);
            macros::EFFECT(
                agent,
                Hash40::new("ganon_entry"),
                Hash40::new("top"),
                -4,
                0,
                26,
                0,
                0,
                0,
                0.3,
                0,
                0,
                0,
                0,
                0,
                0,
                true,
            );
            macros::LAST_EFFECT_SET_RATE(agent, 1.9);
        }
        wait(agent.lua_state_agent, 3.0);
        macros::EFFECT_OFF_KIND(agent, Hash40::new("ganon_rekkikyaku"), false, false);
        // macros::EFFECT_OFF_KIND(agent, Hash40::new("ganon_entry"), false, false);
        macros::EFFECT(
            agent,
            Hash40::new("sys_damage_purple"),
            Hash40::new("havel"),
            0,
            1,
            0,
            0,
            0,
            0,
            0.7,
            0,
            0,
            0,
            0,
            0,
            0,
            true,
        );
    }
    wait(agent.lua_state_agent, 3.0);
    macros::EFFECT(
        agent,
        Hash40::new("ganon_rekkikyaku"),
        Hash40::new("top"),
        0,
        4,
        20,
        0,
        0,
        -90,
        0.7,
        0,
        0,
        0,
        0,
        0,
        0,
        true,
    );
    macros::LAST_EFFECT_SET_RATE(agent, 1.5);
    macros::LAST_EFFECT_SET_SCALE_W(agent, 0.8, 1.6, 0.5);
}

unsafe extern "C" fn ganon_utilt_expr(fighter: &mut L2CAgentBase) {
    frame(fighter.lua_state_agent, 15.0);
    if macros::is_excute(fighter) {
        macros::QUAKE(fighter, *CAMERA_QUAKE_KIND_M);
    }
}

unsafe extern "C" fn ganon_utilt_snd(fighter: &mut L2CAgentBase) {
    frame(fighter.lua_state_agent, 13.0);
    if macros::is_excute(fighter) {
        macros::PLAY_SE(fighter, Hash40::new("se_ganon_attackhard_h02"));
    }
    frame(fighter.lua_state_agent, 15.0);
    if macros::is_excute(fighter) {
        macros::PLAY_SEQUENCE(fighter, Hash40::new("seq_ganon_rnd_attack"));
        macros::PLAY_SE(fighter, Hash40::new("se_ganon_attackhard_h03"));
    }
}

pub fn install() {
    Agent::new("ganon")
        .game_acmd("game_attackhi3", ganon_utilt, Priority::Default)
        .effect_acmd("effect_attackhi3", ganon_utilt_eff, Priority::Default)
        .sound_acmd("sound_attackhi3", ganon_utilt_snd, Priority::Default)
        .expression_acmd("expression_attackhi3", ganon_utilt_expr, Priority::Default)
        .install();
}
